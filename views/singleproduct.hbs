<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{{product.name}} - Detail Produk</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/style.css" />
    </head>
<body>
    {{> navbar_main }} <main class="container single-product-main my-5 pt-3">
        <div class="row g-lg-5 g-md-4 g-3">
            <div class="col-lg-6 col-md-5">
                <div id="productImagesCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
                    <div class="carousel-inner">
                        {{#if product.images.length}}
                            {{#each product.images}}
                            <div class="carousel-item {{#if @first}}active{{/if}}">
                                <img src="{{this.image_url}}" class="d-block w-100" alt="Image for {{../product.name}}" />
                            </div>
                            {{/each}}
                        {{else}}
                            <div class="carousel-item active">
                                <img src="{{product.image_url}}" class="d-block w-100" alt="{{product.name}}" />
                            </div>
                        {{/if}}
                    </div>
                    {{#if (gt product.images.length 1)}}
                        <button class="carousel-control-prev" type="button" data-bs-target="#productImagesCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#productImagesCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    {{/if}}
                </div>
            </div>

            <div class="col-lg-6 col-md-7 product-details-column">
                <h1 class="product-name-display">{{product.name}}</h1>
                <span class="product-category">Category: {{product.category_name}}</span>
                <div class="product-rating-display my-2">
                    {{{generateStars product.rating}}}
                </div>
                <p class="product-price-display">Rp {{product.price}}</p>
                <p class="product-description">{{product.description}}</p>
                
                <div class="mb-3 quantity-control-group">
                    <label for="quantitySingleProduct" class="form-label">Quantity:</label>
                    <div class="input-group">
                        <button class="btn btn-outline-secondary" type="button" id="button-minus-single">-</button>
                        <input type="number" id="quantitySingleProduct" class="form-control text-center" min="1" value="1" />
                        <button class="btn btn-outline-secondary" type="button" id="button-plus-single">+</button>
                    </div>
                </div>
                

                <div class="product-actions d-grid gap-2">
                    <button class="btn btn-primary" id="btnAddToCartSingle">Add to Cart</button>
                    {{#if user}}
                    <button class="btn btn-outline-danger btn-wishlist-single" id="btnToggleWishlistPage" data-product-id="{{product.id}}">
                        {{#if isWishlisted}}
                            <i class="bi bi-heart-fill"></i> <span>Remove from Wishlist</span>
                        {{else}}
                            <i class="bi bi-heart"></i> <span>Add to Wishlist</span>
                        {{/if}}
                        
                    </button>
                    {{#if user}} {{! Hanya tampilkan jika user login }}
    {{#if (neq product.user_id user.id)}} {{! Hanya tampilkan jika user BUKAN pemilik produk }}
        <button class="btn btn-info w-100 mt-2" id="btnChatWithSeller" data-seller-id="{{product.user_id}}">
            <i class="bi bi-chat-dots-fill"></i> Chat dengan Penjual
        </button>
    {{/if}}
{{/if}}
                    <hr class="my-4">

<div class="product-reviews-section">
    <h4>Ulasan Produk</h4>
    <p><em>(Tampilan daftar ulasan akan dibuat nanti)</em></p>

    {{#if user}} {{! Hanya user yang login bisa memberi ulasan }}
    <div class="card mt-4">
        <div class="card-header">
            <h5>Berikan Ulasan Anda</h5>
        </div>
        <div class="card-body">
            <form id="formReviewProduct">
                <div class="mb-3">
                    <label for="productRatingStars" class="form-label">Rating Anda:</label>
                    <div id="productRatingStars" class="star-rating-input">
                        <i class="bi bi-star" data-value="1"></i>
                        <i class="bi bi-star" data-value="2"></i>
                        <i class="bi bi-star" data-value="3"></i>
                        <i class="bi bi-star" data-value="4"></i>
                        <i class="bi bi-star" data-value="5"></i>
                        <input type="hidden" name="rating" id="ratingValueInput" required>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="reviewText" class="form-label">Ulasan Anda:</label>
                    <textarea class="form-control" id="reviewText" name="review_text" rows="4" placeholder="Tulis ulasan Anda di sini..."></textarea>
                </div>
                <!--Ulasan cuma muncul kalau user sudah beli-->
                <button type="submit" class="btn btn-success">Kirim Ulasan</button>
            </form>
        </div>
    </div>

    {{else}}
    <p><a href="/login">Login</a> untuk memberikan ulasan.</p>
    {{/if}}
</div>
                    {{/if}}
                    <a href="/allProduk" class="btn btn-secondary">Back to Products</a>
                </div>


            </div>
        </div>
    </main>

    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100">
        <div id="wishlistToastSinglePage" class="toast align-items-center text-bg-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="wishlistToastBodySinglePage"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    {{> footer_main }}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const currentProductId = '{{product.id}}'; 

        const qtyInputSingle = document.getElementById('quantitySingleProduct');
        const btnMinusSingle = document.getElementById('button-minus-single');
        const btnPlusSingle = document.getElementById('button-plus-single');
        const btnAddToCartPage = document.getElementById('btnAddToCartSingle');
        const btnToggleWishlistPage = document.getElementById('btnToggleWishlistPage');

        if(btnMinusSingle && qtyInputSingle) {
            btnMinusSingle.addEventListener('click', () => {
                let val = parseInt(qtyInputSingle.value);
                if (val > 1) qtyInputSingle.value = val - 1;
            });
        }
        if(btnPlusSingle && qtyInputSingle) {
            btnPlusSingle.addEventListener('click', () => {
                let val = parseInt(qtyInputSingle.value);
                // Pertimbangkan untuk menambahkan validasi terhadap product.stock di sini
                // if (val < {{product.stock}}) qtyInputSingle.value = val + 1;
                qtyInputSingle.value = val + 1; 
            });
        }

        if (btnAddToCartPage && qtyInputSingle) {
            btnAddToCartPage.addEventListener('click', async () => {
                const quantity = parseInt(qtyInputSingle.value);
                try {
                    const response = await fetch('/api/cart/add', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ product_id: currentProductId, quantity }),
                        credentials: 'include'
                    });
                    const data = await response.json();
                    if (response.ok) {
                        showToastOnPage('🛒 Product added to cart!', 'success'); 
                    } else {
                        showToastOnPage('Failed to add to cart: ' + (data.message || 'Unknown error'), 'danger');
                    }
                } catch (error) {
                    console.error('Error adding to cart:', error);
                    showToastOnPage('An error occurred while adding to cart.', 'danger');
                }
            });
        }

        if (btnToggleWishlistPage) {
            btnToggleWishlistPage.addEventListener('click', async function() {
                const productIdFromButton = this.dataset.productId;
                console.log('[WISHLIST PAGE] Toggling wishlist for product ID:', productIdFromButton);

                let response; 
                try {
                    response = await fetch('/auth/wishlist', { 
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ product_id: productIdFromButton }),
                        credentials: 'include'
                    });

                    const data = await response.json(); 
                    console.log('[WISHLIST PAGE] Response Status:', response.status);
                    console.log('[WISHLIST PAGE] Response Data:', data);

                    if (response.ok) {
                        const iconElement = this.querySelector('i');
                        const textElement = this.querySelector('span');

                        if (data.message === 'Berhasil ditambahkan ke wishlist!') {
                            if(iconElement) iconElement.className = 'bi bi-heart-fill';
                            if(textElement) textElement.textContent = ' Remove from Wishlist';
                            showToastOnPage('✅ Ditambahkan ke wishlist!', 'success');
                        } else {
                            if(iconElement) iconElement.className = 'bi bi-heart';
                            if(textElement) textElement.textContent = ' Add to Wishlist';
                            showToastOnPage('❌ Dihapus dari wishlist!');
                        }
                    } else {
                        showToastOnPage(data.message || 'Gagal memproses wishlist', 'danger');
                    }
                } catch (err) {
                    console.error('[WISHLIST PAGE] Fetch Error:', err);
                    if (response && response.status === 401) { 
                         showToastOnPage('Anda harus login untuk wishlist.', 'warning');
                         // setTimeout(() => { window.location.href = '/login'; }, 2000);
                    } else {
                        showToastOnPage('Terjadi kesalahan. Coba lagi.', 'danger');
                    }
                }
            });
        }

        function showToastOnPage(message, type = 'dark') {
            const toastEl = document.getElementById('wishlistToastSinglePage');
            const toastBody = document.getElementById('wishlistToastBodySinglePage');
            if (!toastEl || !toastBody) {
                console.error('Toast elements for single page not found!');
                return;
            }
            
            toastEl.classList.remove('text-bg-dark', 'text-bg-success', 'text-bg-danger', 'text-bg-warning');
            let toastTypeClass = 'text-bg-dark'; // Default
            if (type === 'success') toastTypeClass = 'text-bg-success';
            else if (type === 'danger') toastTypeClass = 'text-bg-danger';
            else if (type === 'warning') toastTypeClass = 'text-bg-warning';
            else if (type === 'info') toastTypeClass = 'text-bg-info';
            toastEl.classList.add(toastTypeClass);

            toastBody.textContent = message;
            try {
                const toast = bootstrap.Toast.getOrCreateInstance(toastEl);
                toast.show();
            } catch (e) {
                console.error('Error showing toast:', e);
            }
        }
        const btnChatWithSeller = document.getElementById('btnChatWithSeller');
if (btnChatWithSeller) {
    btnChatWithSeller.addEventListener('click', function() {
        const sellerId = this.dataset.sellerId;
        // Untuk sekarang, kita tampilkan alert atau log
        console.log('Ingin chat dengan seller ID:', sellerId);
        showToastOnPage('💬 Fitur chat dengan penjual akan segera hadir!', 'info'); 
        // Di sini nantinya bisa memicu modal chat, redirect ke halaman chat, dll.
    });
}
// --- Logika untuk Input Bintang Rating ---
const ratingStarsContainer = document.getElementById('productRatingStars');
const ratingValueInput = document.getElementById('ratingValueInput');

if (ratingStarsContainer && ratingValueInput) {
    const stars = ratingStarsContainer.querySelectorAll('i.bi-star, i.bi-star-fill'); // Bisa juga bi-star-fill jika sudah ada rating awal

    // Fungsi untuk set visual bintang
    function setStars(rating) {
        stars.forEach(star => {
            if (parseInt(star.dataset.value) <= rating) {
                star.classList.remove('bi-star');
                star.classList.add('bi-star-fill', 'selected');
            } else {
                star.classList.remove('bi-star-fill', 'selected');
                star.classList.add('bi-star');
            }
        });
    }
    
    // Fungsi untuk highlight bintang saat hover
    function highlightStars(rating) {
        stars.forEach(star => {
            if (parseInt(star.dataset.value) <= rating) {
                star.classList.add('hovered');
            } else {
                star.classList.remove('hovered');
            }
        });
    }

    stars.forEach(star => {
        star.addEventListener('mouseover', () => {
            highlightStars(parseInt(star.dataset.value));
        });

        star.addEventListener('mouseout', () => {
            // Kembalikan ke state selected, atau reset jika tidak ada yang selected
            const currentSelectedRating = parseInt(ratingValueInput.value) || 0;
            setStars(currentSelectedRating); 
            stars.forEach(s => s.classList.remove('hovered')); // Hapus semua highlight hover
        });

        star.addEventListener('click', () => {
            const value = parseInt(star.dataset.value);
            ratingValueInput.value = value; // Simpan nilai rating di input hidden
            setStars(value); // Set visual bintang permanen (sampai klik berikutnya)
            console.log('Rating dipilih:', value);
        });
    });
}


// --- Logika untuk Submit Form Review ---
const formReviewProduct = document.getElementById('formReviewProduct');
if (formReviewProduct) {
    formReviewProduct.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const rating = ratingValueInput.value;
        const review_text = document.getElementById('reviewText').value;
        // const productId = currentProductId; // Gunakan currentProductId yang sudah ada

        if (!rating) {
            showToastOnPage('Mohon berikan rating bintang.', 'warning');
            return;
        }

        console.log('[REVIEW] Submitting review. Product ID:', currentProductId, 'Rating:', rating, 'Text:', review_text);

        try {
            const response = await fetch(`/api/products/${currentProductId}/reviews`, { // Endpoint API baru
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ rating: parseInt(rating), review_text }),
                credentials: 'include' 
            });

            const data = await response.json();
            if (response.ok) {
                showToastOnPage('⭐ Terima kasih atas ulasan Anda!', 'success');
                formReviewProduct.reset(); // Kosongkan form
                // Mungkin reset bintang ke state awal juga
                if(ratingValueInput && ratingStarsContainer) {
                    ratingValueInput.value = "";
                    setStars(0); // Reset visual bintang
                }
                // Idealnya, muat ulang daftar ulasan di halaman ini (akan dibahas nanti)
            } else {
                showToastOnPage(data.message || 'Gagal mengirim ulasan.', 'danger');
            }
        } catch (err) {
            console.error('[REVIEW] Submit Error:', err);
            showToastOnPage('Terjadi kesalahan saat mengirim ulasan.', 'danger');
        }
    });
}
    </script>
</body>
</html>