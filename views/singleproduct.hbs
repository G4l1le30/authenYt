{{! views/singleProduct.hbs }}
<!DOCTYPE html>
<html lang="en">
<head>
    {{> header}} {{!-- Pastikan partial header.hbs ada dan berisi meta tags, title, link ke style.css --}}
    <link rel="stylesheet" href="/path/to/your/style.css"> {{!-- Sesuaikan path ke style.css --}}
</head>
<body>
    {{> navbar_main }}

    <main class="container single-product-page my-4 mt-md-5 pt-3">
        {{#if successMessage}}
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            {{successMessage}}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {{/if}}

        <nav aria-label="breadcrumb" class="mb-3 product-breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                {{#if product.category_id}}
                <li class="breadcrumb-item"><a href="/allProduk?category_id={{product.category_id}}">{{product.category_name}}</a></li>
                {{/if}}
                 {{#if product.style_id}}
                <li class="breadcrumb-item"><a href="/allProduk?style={{product.style_slug}}">{{product.style_name}}</a></li>
                {{/if}}
                <li class="breadcrumb-item active" aria-current="page">{{product.name}}</li>
            </ol>
        </nav>

        <div class="row g-md-4 g-lg-5">
            {{!-- Kolom Gambar Produk --}}
            <div class="col-lg-7 col-md-6 product-gallery">
                <div class="main-product-image mb-3 shadow-sm">
                    <img src="{{#if product.images.length}}{{product.images.[0].image_url}}{{else}}{{product.image_url}}{{/if}}"
                         alt="{{product.name}} Main Image"
                         class="img-fluid rounded-3"
                         id="mainProductImage">
                </div>
                {{#if (gt product.images.length 1)}}
                <div class="product-thumbnails d-flex flex-wrap gap-2 mt-3">
                    {{#each product.images}}
                    <div class="thumbnail-item">
                        <img src="{{this.image_url}}"
                             alt="{{../product.name}} Thumbnail {{add @index 1}}"
                             class="img-thumbnail p-0 {{#if @first}}active-thumbnail{{/if}}"
                             onclick="changeMainImage('{{this.image_url}}', this);"> {{!-- Hapus stopCarousel jika tidak ada carousel --}}
                    </div>
                    {{/each}}
                </div>
                {{/if}}
            </div>

            {{!-- Kolom Detail dan Aksi Produk --}}
            <div class="col-lg-5 col-md-6 product-details-actions">
                <h1 class="product-title mb-2">{{product.name}}</h1>
                <p class="mb-2"><small>Sold by: <a href="/seller/{{product.user_id}}">{{product.seller_name}}</a></small></p>

                <div class="d-flex align-items-center mb-2">
                    <div class="product-rating-display">
                        {{{generateStars product.rating}}}
                    </div>
                    {{#if product.review_count}}
                        <a href="#reviews-tab-pane" class="ms-2 text-muted small product-review-link" onclick="activateReviewTab(event)">({{product.review_count}} Reviews)</a>
                    {{else}}
                        <span class="ms-2 text-muted small">(No Reviews Yet)</span>
                    {{/if}}
                </div>

                <div class="product-pricing mb-3">
                    <span class="current-price fs-2 fw-bold">{{{formatRupiah product.price}}}</span>
                </div>

                <p class="product-short-description text-muted mb-3">
                    {{truncate product.description 150}}
                </p>

                {{!-- Pilihan Warna Dinamis --}}
                {{#if product.colorOptions.length}}
                <div class="product-options mb-3">
                    <label class="form-label fw-semibold">Color:<span id="selectedColorNameDisplay" class="ms-1">
                        {{#each product.colorOptions}}{{#if this.isActive}}{{this.name}}{{/if}}{{/each}}
                    </span></label>
                    <div class="color-swatches">
                        {{#each product.colorOptions}}
                        <button type="button"
                                class="color-swatch-btn {{#if this.isActive}}active{{/if}}"
                                style="{{this.style}}"
                                data-color-name="{{this.dataColor}}"
                                title="{{this.name}}">
                            {{#if this.isActive}}
                                <i class="bi bi-check swatch-active-icon"></i>
                            {{/if}}
                        </button>
                        {{/each}}
                    </div>
                    <input type="hidden" name="selected_color" id="selected_color_input" value="{{#each product.colorOptions}}{{#if this.isActive}}{{this.dataColor}}{{/if}}{{/each}}">
                </div>
                {{/if}}

                {{!-- Pilihan Ukuran Dinamis --}}
                {{#if product.sizeOptions.length}}
                <div class="product-options mb-3">
                    <label class="form-label fw-semibold">Size:<span id="selectedSizeNameDisplay" class="ms-1">
                        {{#each product.sizeOptions}}{{#if this.isActive}}{{this.name}}{{/if}}{{/each}}
                    </span></label>
                    <div class="size-selector btn-group" role="group" aria-label="Size selector">
                        {{#each product.sizeOptions}}
                        <input type="radio" class="btn-check size-option-radio"
                               name="selected_size_radio"
                               id="size-{{this.name_sanitized}}"
                               value="{{this.name}}"
                               autocomplete="off"
                               {{#if this.isActive}}checked{{/if}}>
                        <label class="btn btn-outline-dark size-option-label" for="size-{{this.name_sanitized}}">{{this.name}}</label>
                        {{/each}}
                    </div>
                    <input type="hidden" name="selected_size" id="selected_size_input" value="{{#each product.sizeOptions}}{{#if this.isActive}}{{this.name}}{{/if}}{{/each}}">
                </div>
                {{/if}}

                <div class="mb-3">
                    <small class="text-muted d-block">Stock: {{product.stock}}</small>
                </div>


                {{#if user}}
                    {{#if (neq product.user_id user.id)}} {{!-- Jika user login DAN BUKAN pemilik produk --}}
                    <div class="mb-3 quantity-control-group">
                        <label for="quantitySingleProduct" class="form-label fw-semibold">Quantity:</label>
                        <div class="input-group" style="max-width: 150px;">
                            <button class="btn btn-outline-secondary" type="button" id="button-minus-single" aria-label="Decrease quantity">-</button>
                            <input type="number" id="quantitySingleProduct" class="form-control text-center fw-semibold" min="1" value="1" max="{{product.stock}}" aria-label="Product quantity" readonly/>
                            <button class="btn btn-outline-secondary" type="button" id="button-plus-single" aria-label="Increase quantity">+</button>
                        </div>
                    </div>
                    <div class="product-actions d-grid gap-2">
                        <button class="btn btn-dark btn-lg" id="btnAddToCartSingle"><i class="bi bi-cart-plus-fill me-2"></i>Add to Cart</button>
                        <button class="btn btn-outline-secondary btn-lg btn-wishlist-single {{#if isWishlisted}}wishlisted active{{/if}}" id="btnToggleWishlistPage" data-product-id="{{product.id}}">
                            {{#if isWishlisted}}
                                <i class="bi bi-heart-fill text-danger"></i> <span>Remove from Wishlist</span>
                            {{else}}
                                <i class="bi bi-heart"></i> <span>Add to Wishlist</span>
                            {{/if}}
                        </button>
                    </div>
                    {{else}}
                        <p class="alert alert-info text-center small">This is your own product. You cannot add it to your cart or wishlist.</p>
                    {{/if}}
                {{else}} {{!-- Jika user belum login --}}
                     <div class="mb-3 quantity-control-group">
                        <label for="quantitySingleProduct" class="form-label fw-semibold">Quantity:</label>
                        <div class="input-group" style="max-width: 150px;">
                            <button class="btn btn-outline-secondary" type="button" id="button-minus-single" aria-label="Decrease quantity">-</button>
                            <input type="number" id="quantitySingleProduct" class="form-control text-center fw-semibold" min="1" value="1" max="{{product.stock}}" aria-label="Product quantity" readonly/>
                            <button class="btn btn-outline-secondary" type="button" id="button-plus-single" aria-label="Increase quantity">+</button>
                        </div>
                    </div>
                    <div class="product-actions d-grid gap-2">
                        <button class="btn btn-dark btn-lg" id="btnAddToCartSingle"><i class="bi bi-cart-plus-fill me-2"></i>Add to Cart</button>
                         <button class="btn btn-outline-secondary btn-lg btn-wishlist-single" id="btnToggleWishlistPage" data-product-id="{{product.id}}">
                            <i class="bi bi-heart"></i> <span>Add to Wishlist</span>
                        </button>
                    </div>
                {{/if}}

                {{#if user}}
                    {{#if (neq product.user_id user.id)}}
                    <button class="btn btn-outline-info w-100 mt-3" id="btnChatWithSeller" data-seller-id="{{product.user_id}}">
                        <i class="bi bi-chat-dots"></i> Chat with Seller
                    </button>
                    {{/if}}
                {{/if}}
            </div>
        </div>
        <hr class="my-4 my-lg-5">

        {{!-- Bagian Tab Informasi Produk --}}
        <div class="product-info-tabs mt-4" id="productInfoTabs">
            <ul class="nav nav-tabs nav-fill mb-4" id="productDetailTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Product Details</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="reviews-tab" data-bs-toggle="tab" data-bs-target="#reviews-tab-pane" type="button" role="tab" aria-controls="reviews-tab-pane" aria-selected="false">Rating & Reviews ({{product.review_count}})</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="faq-tab" data-bs-toggle="tab" data-bs-target="#faq-tab-pane" type="button" role="tab" aria-controls="faq-tab-pane" aria-selected="false">FAQs</button>
                </li>
            </ul>
            <div class="tab-content" id="productDetailTabContent">
                <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
                    <h5 class="mb-3">Product Description</h5>
                    <p style="white-space: pre-wrap;">{{{product.description}}}</p>
                </div>

                <div class="tab-pane fade" id="reviews-tab-pane" role="tabpanel" aria-labelledby="reviews-tab" tabindex="0">
                    <div class="product-reviews-section">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4>All Reviews ({{reviews.length}})</h4>
                            {{#if user}}
                                {{#if (neq product.user_id user.id)}} {{!-- Cek apakah pengguna BUKAN pemilik produk --}}
                                    {{#unless (hasUserReviewed reviews user.id)}} {{!-- Cek apakah pengguna belum mereview --}}
                                    <button class="btn btn-dark" type="button" data-bs-toggle="collapse" data-bs-target="#collapseReviewForm" aria-expanded="false" aria-controls="collapseReviewForm">
                                        Write a Review
                                    </button>
                                    {{else}}
                                    <button class="btn btn-outline-success" type="button" disabled>
                                        <i class="bi bi-check-circle-fill"></i> You've Reviewed This
                                    </button>
                                    {{/unless}}
                                {{/if}}
                            {{/if}}
                        </div>

                        {{#if user}}
                            {{#if (neq product.user_id user.id)}}
                                {{#unless (hasUserReviewed reviews user.id)}}
                                <div class="collapse mb-4" id="collapseReviewForm">
                                    <div class="card card-body">
                                        <form id="formReviewProduct">
                                            <div class="mb-3">
                                                <label for="productRatingStars" class="form-label">Your Rating:</label>
                                                <div id="productRatingStars" class="star-rating-input">
                                                    <i class="bi bi-star" data-value="1" title="Terrible"></i>
                                                    <i class="bi bi-star" data-value="2" title="Poor"></i>
                                                    <i class="bi bi-star" data-value="3" title="Average"></i>
                                                    <i class="bi bi-star" data-value="4" title="Good"></i>
                                                    <i class="bi bi-star" data-value="5" title="Excellent"></i>
                                                    <input type="hidden" name="rating" id="ratingValueInput" required>
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="reviewText" class="form-label">Your Review:</label>
                                                <textarea class="form-control" id="reviewText" name="review_text" rows="3" placeholder="Write your review here..."></textarea>
                                            </div>
                                            <button type="submit" class="btn btn-dark">Submit Review</button>
                                        </form>
                                    </div>
                                </div>
                                {{/unless}}
                            {{/if}}
                        {{else}}
                        <p class="mt-3"><a href="/login?redirect=/product/{{product.id}}#reviews-tab-pane">Login</a> to write a review.</p>
                        {{/if}}

                        {{#if reviews.length}}
                            <div class="list-group mt-3">
                                {{#each reviews}}
                                <div class="list-group-item list-group-item-action flex-column align-items-start mb-3 border rounded-3 shadow-sm">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1 review-user-name fw-bold">{{this.reviewer_name}}</h6>
                                        <small class="review-date text-muted">{{formatDate this.created_at}}</small>
                                    </div>
                                    <div class="mb-1 product-rating-display review-stars">
                                        {{{generateStars this.rating}}}
                                    </div>
                                    <p class="mb-1 review-text" style="white-space: pre-wrap;">{{this.review_text}}</p>
                                </div>
                                {{/each}}
                            </div>
                        {{else}}
                            {{#unless user}}
                                <p class="mt-3 text-muted"><em>There are no reviews for this product yet.</em></p>
                            {{else}}
                                {{#if (neq product.user_id user.id)}}
                                    <p class="mt-3 text-muted"><em>There are no reviews for this product yet. Be the first to write one!</em></p>
                                {{else}}
                                     <p class="mt-3 text-muted"><em>There are no reviews for this product yet.</em></p>
                                {{/if}}
                            {{/unless}}
                        {{/if}}
                    </div>
                </div>
                <div class="tab-pane fade" id="faq-tab-pane" role="tabpanel" aria-labelledby="faq-tab" tabindex="0">
                    <h5 class="mb-3">Frequently Asked Questions</h5>
                    <div class="accordion" id="faqAccordion">
                        {{!-- Contoh Accordion Item --}}
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                    What materials is this product made of?
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    This product is primarily made from 100% organic cotton, ensuring both comfort and sustainability.
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingTwo">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                    How do I care for this product?
                                </button>
                            </h2>
                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    We recommend machine washing cold with similar colors and tumble drying on low. Do not bleach.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100">
        <div id="singleProductToast" class="toast align-items-center text-bg-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="singleProductToastBody"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <div class="modal fade" id="confirmToggleWishlistModalSingle" tabindex="-1" aria-labelledby="confirmToggleModalLabelSingle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmToggleModalLabelSingle">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="confirmToggleWishlistModalBodySingle">
                    Are you sure?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="btnConfirmToggleWishlistSingle">Yes, Proceed</button>
                </div>
            </div>
        </div>
    </div>

    {{> footer_main }}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variabel global dari Handlebars
        const currentProductId = '{{product.id}}';
        const productStock = parseInt('{{product.stock}}') || 0;
        const loggedInUserId = {{#if user}}{{user.id}}{{else}}null{{/if}};
        const productOwnerId = {{product.user_id}};

        function showToastOnPage(message, type = 'dark') {
            const toastEl = document.getElementById('singleProductToast');
            const toastBody = document.getElementById('singleProductToastBody');
            if (!toastEl || !toastBody) {
                console.error('Toast elements for this page not found!');
                return;
            }
            toastEl.classList.remove('text-bg-dark', 'text-bg-success', 'text-bg-danger', 'text-bg-warning', 'text-bg-info');
            let toastTypeClass = 'text-bg-dark';
            if (type === 'success') toastTypeClass = 'text-bg-success';
            else if (type === 'danger') toastTypeClass = 'text-bg-danger';
            else if (type === 'warning') toastTypeClass = 'text-bg-warning';
            else if (type === 'info') toastTypeClass = 'text-bg-info';
            toastEl.classList.add(toastTypeClass);
            toastBody.textContent = message;
            try {
                const toast = bootstrap.Toast.getOrCreateInstance(toastEl);
                toast.show();
            } catch (e) { console.error('Error showing toast:', e); }
        }

        function changeMainImage(newImageUrl, clickedThumbnail) {
            const mainImage = document.getElementById('mainProductImage');
            if (mainImage) mainImage.src = newImageUrl;
            document.querySelectorAll('.thumbnail-item img').forEach(img => img.classList.remove('active-thumbnail'));
            if (clickedThumbnail) clickedThumbnail.classList.add('active-thumbnail');
        }

        document.addEventListener('DOMContentLoaded', function() {
            const colorSwatchesContainer = document.querySelector('.color-swatches');
            const selectedColorNameDisplay = document.getElementById('selectedColorNameDisplay');
            const selectedColorInput = document.getElementById('selected_color_input');

            if (colorSwatchesContainer) {
                const swatches = colorSwatchesContainer.querySelectorAll('.color-swatch-btn');
                swatches.forEach(swatch => {
                    swatch.addEventListener('click', function() {
                        swatches.forEach(s => {
                            s.classList.remove('active');
                            const icon = s.querySelector('.swatch-active-icon');
                            if (icon) icon.remove();
                        });

                        this.classList.add('active');
                        const checkIcon = document.createElement('i');
                        checkIcon.className = 'bi bi-check swatch-active-icon';
                        this.appendChild(checkIcon);

                        const colorName = this.dataset.colorName;
                        if (selectedColorNameDisplay) selectedColorNameDisplay.textContent = colorName;
                        if (selectedColorInput) selectedColorInput.value = colorName;

                        const swatchBgColor = window.getComputedStyle(this).backgroundColor;
                        const rgb = swatchBgColor.match(/\d+/g);
                        if (rgb) {
                            const brightness = Math.round(((parseInt(rgb[0]) * 299) +
                                                         (parseInt(rgb[1]) * 587) +
                                                         (parseInt(rgb[2]) * 114)) / 1000);
                            checkIcon.style.color = (brightness > 125) ? 'black' : 'white';
                        } else {
                             checkIcon.style.color = 'white';
                        }
                    });
                });
                const activeSwatchOnInit = colorSwatchesContainer.querySelector('.color-swatch-btn.active .swatch-active-icon');
                if (activeSwatchOnInit) {
                    const parentSwatch = activeSwatchOnInit.parentElement;
                    const swatchBgColor = window.getComputedStyle(parentSwatch).backgroundColor;
                    const rgb = swatchBgColor.match(/\d+/g);
                    if (rgb) {
                        const brightness = Math.round(((parseInt(rgb[0]) * 299) + (parseInt(rgb[1]) * 587) + (parseInt(rgb[2]) * 114)) / 1000);
                        activeSwatchOnInit.style.color = (brightness > 125) ? 'black' : 'white';
                    } else {
                        activeSwatchOnInit.style.color = 'white';
                    }
                }
            }

            const sizeRadios = document.querySelectorAll('.size-option-radio');
            const selectedSizeNameDisplay = document.getElementById('selectedSizeNameDisplay');
            const selectedSizeInput = document.getElementById('selected_size_input');

            function updateSelectedSizeDisplay() {
                const checkedRadio = document.querySelector('.size-option-radio:checked');
                if (checkedRadio) {
                    const sizeName = checkedRadio.value;
                    if (selectedSizeNameDisplay) selectedSizeNameDisplay.textContent = sizeName;
                    if (selectedSizeInput) selectedSizeInput.value = sizeName;
                } else if (selectedSizeNameDisplay) {
                     selectedSizeNameDisplay.textContent = "";
                     if(selectedSizeInput) selectedSizeInput.value = "";
                }
            }
            sizeRadios.forEach(radio => {
                radio.addEventListener('change', updateSelectedSizeDisplay);
            });
            updateSelectedSizeDisplay();

            const qtyInputSingle = document.getElementById('quantitySingleProduct');
            const btnMinusSingle = document.getElementById('button-minus-single');
            const btnPlusSingle = document.getElementById('button-plus-single');
            if(qtyInputSingle) qtyInputSingle.readOnly = true;

            if(btnMinusSingle && qtyInputSingle) {
                btnMinusSingle.addEventListener('click', () => {
                    let val = parseInt(qtyInputSingle.value);
                    if (val > 1) qtyInputSingle.value = val - 1;
                });
            }
            if(btnPlusSingle && qtyInputSingle) {
                btnPlusSingle.addEventListener('click', () => {
                    let val = parseInt(qtyInputSingle.value);
                    if (val < productStock) {
                        qtyInputSingle.value = val + 1;
                    } else {
                        showToastOnPage(`Cannot add more than ${productStock} items (available stock).`, 'warning');
                    }
                });
            }

            const btnAddToCartPage = document.getElementById('btnAddToCartSingle');
            if (btnAddToCartPage) {
                btnAddToCartPage.addEventListener('click', async () => {
                    if (!loggedInUserId) {
                        showToastOnPage('Please login to add items to your cart.', 'warning');
                        // window.location.href = '/login?redirect=' + window.location.pathname + window.location.search;
                        return;
                    }
                    const quantity = parseInt(qtyInputSingle ? qtyInputSingle.value : 1);
                    const selectedColor = selectedColorInput ? selectedColorInput.value : null;
                    const selectedSize = selectedSizeInput ? selectedSizeInput.value : null;

                    if (document.querySelector('.color-swatches') && !selectedColor && {{product.colorOptions.length}} > 0) {
                        showToastOnPage('Please select a color.', 'warning');
                        return;
                    }
                    if (document.querySelector('.size-selector') && !selectedSize && {{product.sizeOptions.length}} > 0) {
                        showToastOnPage('Please select a size.', 'warning');
                        return;
                    }

                    try {
                        const response = await fetch('/api/cart/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                product_id: currentProductId,
                                quantity,
                                color: selectedColor,
                                size: selectedSize
                            }),
                            credentials: 'include'
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showToastOnPage(data.message || '🛒 Product added to cart!', 'success');
                             // Update cart count in navbar if exists
                            const cartCountElement = document.getElementById('cartItemCount');
                            if (cartCountElement && data.cartItemCount !== undefined) {
                                cartCountElement.textContent = data.cartItemCount;
                                cartCountElement.classList.remove('d-none');
                            }
                        } else {
                            showToastOnPage(data.message || 'Failed to add to cart.', 'danger');
                        }
                    } catch (error) {
                        console.error('Error adding to cart:', error);
                        showToastOnPage('An error occurred while adding to cart.', 'danger');
                    }
                });
            }

            let actionToConfirmWishlist = null;
            const btnToggleWishlistPage = document.getElementById('btnToggleWishlistPage');
            const confirmToggleWishlistModalElement = document.getElementById('confirmToggleWishlistModalSingle');
            const confirmToggleWishlistModal = confirmToggleWishlistModalElement ? new bootstrap.Modal(confirmToggleWishlistModalElement) : null;
            const confirmToggleWishlistModalBody = document.getElementById('confirmToggleWishlistModalBodySingle');
            const btnConfirmToggleWishlistAction = document.getElementById('btnConfirmToggleWishlistSingle');

            if (btnToggleWishlistPage) {
                btnToggleWishlistPage.addEventListener('click', function() {
                    if (!loggedInUserId) {
                        showToastOnPage('Please login to manage your wishlist.', 'warning');
                        // window.location.href = '/login?redirect=' + window.location.pathname + window.location.search;
                        return;
                    }
                    const isCurrentlyWishlisted = this.classList.contains('wishlisted');
                    if (isCurrentlyWishlisted) {
                        actionToConfirmWishlist = 'remove';
                        if(confirmToggleWishlistModalBody) confirmToggleWishlistModalBody.textContent = 'Are you sure you want to remove this item from your wishlist?';
                        if(btnConfirmToggleWishlistAction) {
                            btnConfirmToggleWishlistAction.className = 'btn btn-danger';
                            btnConfirmToggleWishlistAction.textContent = 'Yes, Remove';
                        }
                    } else {
                        actionToConfirmWishlist = 'add';
                        if(confirmToggleWishlistModalBody) confirmToggleWishlistModalBody.textContent = 'Are you sure you want to add this item to your wishlist?';
                        if(btnConfirmToggleWishlistAction) {
                           btnConfirmToggleWishlistAction.className = 'btn btn-primary';
                           btnConfirmToggleWishlistAction.textContent = 'Yes, Add';
                        }
                    }
                    if (confirmToggleWishlistModal) confirmToggleWishlistModal.show();
                });
            }
            if (btnConfirmToggleWishlistAction) {
                btnConfirmToggleWishlistAction.addEventListener('click', async () => {
                    if (currentProductId && actionToConfirmWishlist) {
                        await proceedToggleWishlist(currentProductId);
                    }
                    if (confirmToggleWishlistModal) confirmToggleWishlistModal.hide();
                });
            }
            async function proceedToggleWishlist(productId) {
                let response;
                try {
                    response = await fetch('/auth/wishlist', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ product_id: productId }),
                        credentials: 'include'
                    });
                    const data = await response.json();
                    if (response.ok) {
                        const iconElement = btnToggleWishlistPage.querySelector('i');
                        const textElement = btnToggleWishlistPage.querySelector('span');
                        if (data.wishlisted) { // Assuming backend returns { wishlisted: true/false }
                            btnToggleWishlistPage.classList.add('wishlisted', 'active');
                            btnToggleWishlistPage.classList.replace('btn-outline-secondary', 'btn-danger');
                            if(iconElement) { iconElement.className = 'bi bi-heart-fill text-danger'; }
                            if(textElement) textElement.textContent = ' Remove from Wishlist';
                            showToastOnPage(data.message || '✅ Added to wishlist!', 'success');
                        } else {
                            btnToggleWishlistPage.classList.remove('wishlisted', 'active');
                            btnToggleWishlistPage.classList.replace('btn-danger', 'btn-outline-secondary');
                            if(iconElement) { iconElement.className = 'bi bi-heart'; }
                            if(textElement) textElement.textContent = ' Add to Wishlist';
                            showToastOnPage(data.message || '❌ Removed from wishlist!');
                        }
                    } else {
                        showToastOnPage(data.message || 'Failed to process wishlist', 'danger');
                    }
                } catch (err) {
                    console.error('Wishlist Fetch Error:', err);
                    if (response && response.status === 401) {
                        showToastOnPage('You must be logged in to use wishlist.', 'warning');
                    } else {
                        showToastOnPage('An error occurred. Please try again.', 'danger');
                    }
                }
                actionToConfirmWishlist = null;
            }

            const btnChatWithSeller = document.getElementById('btnChatWithSeller');
            if (btnChatWithSeller) {
                btnChatWithSeller.addEventListener('click', function() {
                    if (!loggedInUserId) {
                        showToastOnPage('Please login to chat with the seller.', 'warning');
                        return;
                    }
                    const sellerId = this.dataset.sellerId;
                    console.log('Initiating chat with seller ID:', sellerId);
                    showToastOnPage('💬 Chat with seller feature coming soon!', 'info');
                });
            }

            const ratingStarsContainer = document.getElementById('productRatingStars');
            const ratingValueInput = document.getElementById('ratingValueInput');
            if (ratingStarsContainer && ratingValueInput) {
                const stars = ratingStarsContainer.querySelectorAll('i');
                function setStarsVisual(rating) {
                    stars.forEach(star => {
                        if (parseInt(star.dataset.value) <= rating) {
                            star.classList.remove('bi-star');
                            star.classList.add('bi-star-fill', 'selected');
                        } else {
                            star.classList.remove('bi-star-fill', 'selected');
                            star.classList.add('bi-star');
                        }
                    });
                }
                function highlightStars(rating) {
                    stars.forEach(star => {
                        star.classList.remove('hovered');
                        if (parseInt(star.dataset.value) <= rating) {
                            star.classList.add('hovered');
                        }
                    });
                }
                stars.forEach(star => {
                    star.addEventListener('mouseover', () => highlightStars(parseInt(star.dataset.value)));
                    star.addEventListener('mouseout', () => {
                        const currentSelectedRating = parseInt(ratingValueInput.value) || 0;
                        setStarsVisual(currentSelectedRating);
                        stars.forEach(s => s.classList.remove('hovered'));
                    });
                    star.addEventListener('click', () => {
                        const value = parseInt(star.dataset.value);
                        ratingValueInput.value = value;
                        setStarsVisual(value);
                    });
                });
            }

            const formReviewProduct = document.getElementById('formReviewProduct');
            if (formReviewProduct) {
                formReviewProduct.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    if (!loggedInUserId) {
                        showToastOnPage('Please login to submit a review.', 'warning');
                        return;
                    }
                    const rating = ratingValueInput.value;
                    const review_text = document.getElementById('reviewText').value;
                    if (!rating) {
                        showToastOnPage('Please provide a star rating.', 'warning');
                        return;
                    }
                    try {
                        const response = await fetch(`/api/products/${currentProductId}/reviews`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ rating: parseInt(rating), review_text }),
                            credentials: 'include'
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showToastOnPage('⭐ Thank you! Your review will appear after page reload.', 'success');
                            formReviewProduct.reset();
                            if(ratingValueInput && ratingStarsContainer) {
                                ratingValueInput.value = "";
                                setStarsVisual(0); // Reset visual stars
                            }
                            // Collapse the form
                            const reviewFormCollapse = document.getElementById('collapseReviewForm');
                            if (reviewFormCollapse) {
                                const bsCollapse = bootstrap.Collapse.getInstance(reviewFormCollapse) || new bootstrap.Collapse(reviewFormCollapse);
                                bsCollapse.hide();
                            }
                            // Optionally, you could dynamically add the new review to the list or just prompt reload.
                            // setTimeout(() => window.location.reload(), 2500);
                        } else {
                            showToastOnPage(data.message || 'Failed to submit review.', 'danger');
                        }
                    } catch (err) {
                        console.error('Review Submit Error:', err);
                        showToastOnPage('An error occurred while submitting the review.', 'danger');
                    }
                });
            }

            function activateReviewTab(event) {
                event.preventDefault();
                const reviewTabButton = document.getElementById('reviews-tab');
                if (reviewTabButton) {
                    const tab = new bootstrap.Tab(reviewTabButton);
                    tab.show();
                    const tabContentElement = document.getElementById('productInfoTabs');
                    if (tabContentElement) {
                        tabContentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                }
            }
            // Expose function to global scope if called by inline onclick from Handlebars
            window.activateReviewTab = activateReviewTab;
            window.changeMainImage = changeMainImage;


        });
    </script>
</body>
</html>